import java.util.HashMap;

// Leetcode 924

class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        parent = new int[n];
        size = new int[n];
        HashMap<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j && graph[i][j] == 1) {
                    union(i, j);
                }
            }
        }

        for(int i=0;i<initial.length;i++) {
            int lead = find(initial[i]);
            if(map.containsKey(lead)){
                map.put(lead, map.get(lead) + 1);
            }
            else {
                map.put(lead, 1);
            }
        }

        int count = -1;
        int ans = -1;

        for(int i=0;i<initial.length;i++) {
            int ldr = find(initial[i]);
            int s = size[ldr];
            int in = map.get(ldr);
            
            if(s > count){
                if(in==1){
                    count = s;
                    ans = initial[i];
                }
            }
        }

        return ans;
    }

    int parent[];
    int size[];

    public int find(int x) {
        if (parent[x] == x) {
            return x;
        }
        int temp = find(parent[x]);
        parent[x] = temp;
        return parent[x];
    }

    public void union(int x, int y) {
        int lx = find(x);
        int ly = find(y);
        if (lx != ly) {
            if (size[lx] > size[ly]) {
                parent[ly] = lx;
                size[lx] += size[ly];
            } else {
                parent[ly] = lx;
                size[ly] += size[lx];
            }
        }
    }
}