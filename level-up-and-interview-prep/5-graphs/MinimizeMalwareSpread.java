// Leetcode 924
class Solution {
    public int minMalwareSpread(int[][] graph, int[] infected) {
        int n = graph.length;
        parent = new int[n];
        size = new int[n];
        HashMap<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j && graph[i][j] == 1) {
                    union(i, j);
                }
            }
        }

        Arrays.sort(infected);
        for (int i = 0; i < infected.length; i++) {
            int sl = parent[infected[i]];
            if (map.containsKey(sl)) {
                map.put(sl, map.get(sl) + 1);
            } else {
                map.put(sl, 1);
            }
        }

        int ans = -1;
        int nodeCount = -1;
        for (int i = 0; i < infected.length; i++) {
            int sl = parent[infected[i]];
            int ss = size[sl];
            if (map.get(sl) > 1)
                ss = 0;
            if (ss > nodeCount) {
                nodeCount = ss;
                ans = infected[i];
            }
        }

        return ans;
    }

    int[] parent;
    int[] size;

    public int find(int x) {
        if (x == parent[x])
            return x;
        int temp = find(parent[x]);
        parent[x] = temp;
        return temp;
    }

    public void union(int x, int y) {
        int lx = find(x);
        int ly = find(y);
        if (lx != ly) {
            if (size[lx] > size[ly]) {
                parent[ly] = lx;
                size[lx] += size[ly];
            } else {
                parent[lx] = ly;
                size[ly] += size[lx];
            }
        }
    }
}